{
	"Card": {
		"scope": "java",
		"prefix": "mycard",
		"isFileTemplate": true,
		"body": [
			"",
			"import com.megacrit.cardcrawl.characters.AbstractPlayer;",
			"import com.megacrit.cardcrawl.monsters.AbstractMonster;",
			"",
			"import static lingmod.ModCore.makeID;",
			"import static lingmod.util.Wiz.*;",
			"",
			"public class $TM_FILENAME_BASE extends AbstractEasyCard {",
			"    public final static String ID = makeID($TM_FILENAME_BASE.class.getSimpleName());",
			"",
			"    public $TM_FILENAME_BASE() {",
			"        super(ID, ${1|0,1,2,3,-1,-2|}, CardType.${2|ATTACK,SKILL,POWER,CURSE,STATUS|}, CardRarity.${3|COMMON,UNCOMMON,RARE,SPECIAL,BASIC,CURSE|}, CardTarget.${4|ENEMY,ALL_ENEMY,SELF,NONE,SELF_AND_ENEMY,ALL|});",
			"        $0",
			"    }",
			"",
			"    public void use(AbstractPlayer p, AbstractMonster m) {",
			"        ",
			"    }",
			"    @Override",
			"    public void upp() {",
			"        // TODO Auto-generated method stub",
			"    }",
			"}",
			"//  \"lingmod:$TM_FILENAME_BASE\": {",
			"//    \"NAME\": \"${TM_FILENAME_BASE/(.*)/$1/}\",",
			"//    \"DESCRIPTION\": \"\"",
			"//  }"
		]
	},
	"Damage": {
		"scope": "java",
		"prefix": "dmg",
		"body": ["dmg(m, AbstractGameAction.AttackEffect.${1|BLUNT_LIGHT,BLUNT_HEAVY,SLASH_DIAGONAL,SMASH,SLASH_HEAVY,SLASH_HORIZONTAL,SLASH_VERTICAL,NONE,FIRE,POISON,SHIELD,LIGHTNING|});"]
	},
	"Power": {
		"prefix": "mypower",
		"body": [
			"package lingmod.powers;",
			"",
			"import static lingmod.ModCore.makeID;",
			"import com.megacrit.cardcrawl.core.AbstractCreature;",
			"import com.megacrit.cardcrawl.localization.PowerStrings;",
			"import com.megacrit.cardcrawl.powers.AbstractPower;",
			"",
			"import lingmod.ModCore;",
			"",
			"public class $TM_FILENAME_BASE extends AbstractEasyPower {",
			"    public static final String CLASS_NAME = $TM_FILENAME_BASE.class.getSimpleName();",
			"    public static final String POWER_ID = makeID(CLASS_NAME);",
			"    private static final PowerStrings powerStrings = CardCrawlGame.languagePack.getPowerStrings(POWER_ID);",
			"    public static final String NAME = powerStrings.NAME;",
			"    public static final String[] DESCRIPTIONS = powerStrings.DESCRIPTIONS;",
			"",
			"    private static final AbstractPower.PowerType TYPE = AbstractPower.PowerType.${1|BUFF, DEBUFF|};",
			"    private static final boolean TURN_BASED = true; //  是否回合后消失",
			"",
			"    public $TM_FILENAME_BASE(AbstractCreature owner, int amount) {",
			"        super(POWER_ID, NAME, TYPE, TURN_BASED, owner, amount);",
			"        updateDescription();",
			"    }",
			"}",
			"",
			"//  \"lingmod:$TM_FILENAME_BASE\": {",
			"//    \"NAME\": \"${1}\",",
			"//    \"DESCRIPTIONS\": [",
			"//      \"${2}\",",
			"//    ]",
			"//  },"
		],
		"description": ""
	},
	"ApplyPower": {
		"prefix": "appaction",
		"body": [
			"addToBot(new MyApplyPower_Action(${1}, ${2}, new ${3}));",
		],
		"description": "apply power action"
	},
	"PhasedEvent Template": {
	"prefix": "myevent",
	"body": [
		"import static lingmod.ModCore.makeID;",
		"import static lingmod.ModCore.makeImagePath;",
		"",
		"import com.megacrit.cardcrawl.core.CardCrawlGame;",
		"import com.megacrit.cardcrawl.localization.EventStrings;",
		"import com.megacrit.cardcrawl.relics.AbstractRelic;",
		"",
		"import basemod.abstracts.events.PhasedEvent;",
		"import basemod.abstracts.events.phases.TextPhase;",
		"import lingmod.ModCore.ResourceType;",
		"import lingmod.interfaces.CampfireSleepEvent;",
		"import lingmod.relics.Beans_LingRelic;",
		"",
		"${1}@CampfireSleepEvent",
		"public class $TM_FILENAME_BASE extends PhasedEvent {",
		"",
		"    public static final String ID = makeID($TM_FILENAME_BASE.class.getSimpleName());",
		"    private static final EventStrings eventStrings = CardCrawlGame.languagePack.getEventString(ID);",
		"    private static final String[] DESCRIPTIONS = eventStrings.DESCRIPTIONS;",
		"    private static final String[] OPTIONS = eventStrings.OPTIONS;",
		"    public static String NAME = eventStrings.NAME;",
		"    public static String IMG_PATH = makeImagePath(\"$TM_FILENAME_BASE\", ResourceType.EVENTS);",
		"",
		"    public $TM_FILENAME_BASE() {",
		"        super(ID, eventStrings.NAME, IMG_PATH);",
		"        registerPhase(Phases.BEGIN, new TextPhase(DESCRIPTIONS[${2:0}])",
		"                .addOption(OPTIONS[${3:0}], (i) -> {",
		"                  ${5}",
		"                }));",
		"        transitionKey(Phases.BEGIN);",
		"    }",
		"",
		"    public enum Phases {",
		"        BEGIN, $0",
		"    }",
		"}",
		""
	],
	"description": "PhasedEvent Template"
}
}